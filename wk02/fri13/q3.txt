
Assume A is an array containing the coefficients [a_0, a_1, ... , a_n].
Given an x, we want to compute:
                 a_0 + a_1 x + a_2 x^2 + ... + a_n x^n

-- First attempt --

This is the simplest approach.
We compute each term of the polynomial one by one and add all the terms
to a running sum.

 1 | sum = 0
 2 | for i = 0..n do
 3 |     sum += A[i] * power(x, i)
 4 | end for

 5 | procedure power(x, i):
 6 |     result = 1
 7 |     for j = 0..(i - 1) do
 8 |         result *= x       <<<
 9 |     end for
10 |     return result

Let's look at how many times the line I've marked with <<< runs. When i
is  0, it does not run. When i is 1, it runs once. When i is n, it runs
n  times.  So  in  total, it runs 0 + 1 + ... + n times, which is equal
to n(n + 1)/2. This makes our algorithm O(n^2).

The problem with our algorithm is that we are unnecessarily repeating a
lot  of  computation. For example, suppose we just computed power(x, i)
on  Line  3. We know from maths that to compute power(x, i + 1), we can
simply  multiply  power(x, i)  by  x,  but instead, our pseudocode just
computes it from scratch every time.

-- Second attempt --

We can improve on our first attempt by having an array which stores the
powers of x, which we can compute in O(n) time.

 1 | int powers[n]               | > 1
 2 | power = 1                   | > 1
 3 | for i = 0..n do             | > n
 4 |     powers[i] = power       | > n
 5 |     power *= x              | > n
 6 | end for

 7 | sum = 0                     | > 1
 8 | for i = 0..n do             | > n
 9 |     sum += A[i] * powers[i] | > n
10 | end for

Both parts of the algorithm run in O(n) time,  so overall our algorithm
is O(n).

-- Further improved --

We don't actually need an array to store the powers of x -  whenever we
compute  a  new  power  of  x,  we  can  immediately multiply it by the
corresponding coefficient and add it to the sum.

This doesn't change the time complexity, but saves on space.

 1 | power = 1                   | > 1
 2 | sum = 0                     | > 1
 3 | for i = 0..n do             | > n
 4 |     sum += A[i] * power     | > n
 5 |     power *= x              | > n
 6 | end for
