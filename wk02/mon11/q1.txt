
-----------------------------
Counting primitive operations
-----------------------------

for all i = n down to 1 do      > 2n + 1
    for all j = n down to i do  > 3 + 5 + 7 + ... + (2n + 1)
        print A[i] A[j]         > 1 + 2 + ... + n = n(n + 1)/2
    end for
end for

If  we  add  all the primitive operations together, the sum is something
along the lines of:
                            An^2 + Bn + C

So the algorithm is O(n^2)

------------------------
Counting line executions
------------------------

Alternatively, we can count the number of times each line is run:

for all i = n down to 1 do      > n times
    for all j = n down to i do  > 1 + 2 + ... + n = n(n + 1)/2 times
        print A[i] A[j]         > 1 + 2 + ... + n = n(n + 1)/2 times
    end for
end for

The line that run the most runs for about n(n + 1)/2 times. So, the time
complexity is O(n^2).
